# -------------------------------------
# Creator: Aaleem Siddiqui, 2023, aaleemsiddiqui@gmail.com
# Description: SSM Automation to check Infrastructure status associated with a service hosted in AWS
# -------------------------------------

description: |-
  # **genericServiceName INFRA CHECK**  

  ---
  ## INSTRUCTIONS FOR RUNNING AUTOMATION


  1. *Click on "Execute Automation" in the top right corner.*
  2. *Choose Multi-Account and Region.*
  3. *For targets accounts, enter (AWSaccountNumber) for genericServiceName-LWR_ENV.*
  4. *Set the region as us-east-1 OR us-west-2.*
  - **NOTE**: Do not choose more than one region, otherwise the automation will run twice.
  5. *Scroll down to the bottom and hit "Execute."*
schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  AutomationAssumeRole:
    type: String
    description: The IAM role that runs the automation (DO NOT CHANGE.)
    allowedPattern: '^$|^arn:aws:iam::[0-9]*:role/[/\w+=,.@-]+$'
    default: 'arn:aws:iam::AWSaccountNumber:role/AWS-SystemsManager-AutomationAdministrationRole'
  SlackChannel:
    type: String
    default: slack1
    allowedValues:
      - slack1
      - slack2
      - slack3
mainSteps:
  - name: checkgenericServiceNameInfrastruture
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.6
      Handler: check_infra
      Script: |
        import sys
        import boto3
        import json
        import base64
        import re
        import time
        from datetime import datetime
        from botocore.exceptions import ClientError

        def check_infra(event,context):
          print("\n")
            
          #setting date/time and other vars
          dt_raw = datetime.now()
          current_datetime = dt_raw.strftime("%Y-%m-%dT%H:%M:00Z")
          print_datetime = dt_raw.strftime("%m/%d/%Y %H:%M:%S")
          
          print_time = f"CHECKING INFRASTRUCTURE...\nTHE CURRENT DATE AND TIME IS: {print_datetime}."
          print(print_time)
          
          # ------------------ secrets manager ------------------
          
          session = boto3.session.Session()
          try:
            secret_name = "arn:aws:secretsmanager:us-east-1:AWSaccountNumber:secret:genericServiceName-LWR_ENV-STACKS"
            client = session.client(service_name='secretsmanager',region_name="us-east-1")
            get_secret_value_response = client.get_secret_value(SecretId=secret_name)
            genericServiceName_secrets = json.loads(get_secret_value_response['SecretString'])
            if (genericServiceName_secrets['PRIMARY_genericServiceName_LWR_ENV_STACK'] != 'EAST' and genericServiceName_secrets['PRIMARY_genericServiceName_LWR_ENV_STACK'] != 'WEST'):
              secretsManagerStatus = 'SECRETS MANAGER: ANOMALY DETECTED | THERE IS AN ISSUE WITH THE SECRETS IN US-EAST-1'
            elif (genericServiceName_secrets['LWR_ENV_MASTER_CONNECTION_EAST'] == '' or genericServiceName_secrets['LWR_ENV_MASTER_CONNECTION_WEST'] == '' or genericServiceName_secrets['LM_API_ID'] == '' or genericServiceName_secrets['LM_API_KEY'] == ''):
              secretsManagerStatus = 'SECRETS MANAGER: ANOMALY DETECTED | THERE IS AN ISSUE WITH THE SECRETS IN US-EAST-1'
            else:
              secretsManagerStatus = 'SECRETS MANAGER: OK'
          except:
            try:
              secret_name = "arn:aws:secretsmanager:us-west-2:AWSaccountNumber:secret:genericServiceName-LWR_ENV-STACKS"
              client = session.client(service_name='secretsmanager',region_name="us-west-2")
              get_secret_value_response = client.get_secret_value(SecretId=secret_name)
              genericServiceName_secrets = json.loads(get_secret_value_response['SecretString'])
              if (genericServiceName_secrets['PRIMARY_genericServiceName_LWR_ENV_STACK'] != 'EAST' and genericServiceName_secrets['PRIMARY_genericServiceName_LWR_ENV_STACK'] != 'WEST'):
                secretsManagerStatus = 'SECRETS MANAGER: ANOMALY DETECTED | THERE IS AN ISSUE WITH THE SECRETS IN US-WEST-2'
              elif (genericServiceName_secrets['LWR_ENV_MASTER_CONNECTION_EAST'] == '' or genericServiceName_secrets['LWR_ENV_MASTER_CONNECTION_WEST'] == '' or genericServiceName_secrets['LM_API_ID'] == '' or genericServiceName_secrets['LM_API_KEY'] == ''):
                secretsManagerStatus = 'SECRETS MANAGER: ANOMALY DETECTED | THERE IS AN ISSUE WITH THE SECRETS IN US-WEST-2'
              else:
                secretsManagerStatus ='SECRETS MANAGER: OK | HOWEVER, THERE IS AN ISSUE WITH THE genericServiceName-LWR_ENV-STACKS SECRET IN US-EAST-1'
            except:
              secretsManagerStatus = 'SECRETS MANAGER: ANOMALY DETECTED | UNALBE TO RETRIEVE SECRETS FROM US-EAST-1 OR US-WEST-2.'
          
          if (genericServiceName_secrets['PRIMARY_genericServiceName_LWR_ENV_STACK'] == 'EAST'):
            activeRegion ='us-east-1'
            standbyRegion ='us-west-2'
            activecredentials = genericServiceName_secrets['LWR_ENV_MASTER_CONNECTION_EAST'] #docdb credentials east
            standbycredentials = genericServiceName_secrets['LWR_ENV_MASTER_CONNECTION_WEST'] #docdb credentials west
            activeLBListenerARN = 'arn:aws:elasticloadbalancing:us-east-1:AWSaccountNumber:listener/app/microservice-LWR_ENV/PLACE_HOLDER/PLACE_HOLDER'
            standbyLBListenerARN = 'arn:aws:elasticloadbalancing:us-west-2:AWSaccountNumber:listener/app/microservice-LWR_ENV/PLACE_HOLDER/PLACE_HOLDER'
            restartmicroserviceServicesActive = '[ASSOCIATION_ID_HERE]'
            restartmicroserviceServicesStandby = '[ASSOCIATION_ID_HERE]'
            restartAllgenericServiceNameServicesActive = '[ASSOCIATION_ID_HERE]'
            restartAllgenericServiceNameServicesStandby = '[ASSOCIATION_ID_HERE]'
            stopgenericServiceNameServicesNewStandbyActive = '[ASSOCIATION_ID_HERE]'
            stopgenericServiceNameServicesNewStandbyStandby = '[ASSOCIATION_ID_HERE]'
            microserviceInstancesRGActive = 'arn:aws:resource-groups:us-east-1:AWSaccountNumber:group/genericServiceName_LWR_ENV_microservice_INSTANCES_EAST'
            microserviceInstancesRGStandby = 'arn:aws:resource-groups:us-west-2:AWSaccountNumber:group/genericServiceName_LWR_ENV_microservice_INSTANCES_WEST'
            allInstancesRGActive = 'arn:aws:resource-groups:us-east-1:AWSaccountNumber:group/genericServiceName_LWR_ENV_APPLICATION_INSTANCES_EAST'
            allInstancesRGStandby = 'arn:aws:resource-groups:us-west-2:AWSaccountNumber:group/genericServiceName_LWR_ENV_APPLICATION_INSTANCES_WEST'
            microserviceInstancesActive = ["INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID"]
            microserviceInstancesStandby = ["INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID"]
            allInstancesActive = ["INSTANCE-ID","INSTANCE-ID","INSTANCE-ID","INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID"]
            allInstancesStandby = ["INSTANCE-ID","INSTANCE-ID","INSTANCE-ID", "INSTANCE-ID","INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID"]
          elif (genericServiceName_secrets['PRIMARY_genericServiceName_LWR_ENV_STACK'] == 'WEST'):
            activeRegion ='us-west-2'
            standbyRegion ='us-east-1'
            activecredentials = genericServiceName_secrets['LWR_ENV_MASTER_CONNECTION_WEST'] #docdb credentials west
            standbycredentials = genericServiceName_secrets['LWR_ENV_MASTER_CONNECTION_EAST'] #docdb credentials east
            activeLBListenerARN = 'arn:aws:elasticloadbalancing:us-west-2:AWSaccountNumber:listener/app/microservice-LWR_ENV/PLACE_HOLDER/PLACE_HOLDER'
            standbyLBListenerARN = 'arn:aws:elasticloadbalancing:us-east-1:AWSaccountNumber:listener/app/microservice-LWR_ENV/PLACE_HOLDER/PLACE_HOLDER'
            restartmicroserviceServicesActive = '[ASSOCIATION_ID_HERE]'
            restartmicroserviceServicesStandby = '[ASSOCIATION_ID_HERE]'
            restartAllgenericServiceNameServicesActive = '[ASSOCIATION_ID_HERE]'
            restartAllgenericServiceNameServicesStandby = '[ASSOCIATION_ID_HERE]'
            stopgenericServiceNameServicesNewStandbyActive = '[ASSOCIATION_ID_HERE]'
            stopgenericServiceNameServicesNewStandbyStandby = '[ASSOCIATION_ID_HERE]'
            microserviceInstancesRGActive = 'arn:aws:resource-groups:us-west-2:AWSaccountNumber:group/genericServiceName_LWR_ENV_microservice_INSTANCES_WEST'
            microserviceInstancesRGStandby = 'arn:aws:resource-groups:us-east-1:AWSaccountNumber:group/genericServiceName_LWR_ENV_microservice_INSTANCES_EAST'
            allInstancesRGActive = 'arn:aws:resource-groups:us-west-2:AWSaccountNumber:group/genericServiceName_LWR_ENV_APPLICATION_INSTANCES_WEST'
            allInstancesRGStandby = 'arn:aws:resource-groups:us-east-1:AWSaccountNumber:group/genericServiceName_LWR_ENV_APPLICATION_INSTANCES_EAST'
            microserviceInstancesActive = ["INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID"]
            microserviceInstancesStandby = ["INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID"]
            allInstancesActive = ["INSTANCE-ID","INSTANCE-ID","INSTANCE-ID", "INSTANCE-ID","INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID"]
            allInstancesStandby = ["INSTANCE-ID","INSTANCE-ID","INSTANCE-ID","INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID", "INSTANCE-ID"]
          
          print_regions = f"CURRENT ACTIVE REGION: {activeRegion}\nCURRENT STANDBY REGION: {standbyRegion}\n----------------------------------------------\n"
          print(print_regions)
          
         # ------------------ documentdb (active) ------------------
         
          nodeList = ["LWR_ENV-genericServiceName-db-node-0","LWR_ENV-genericServiceName-db-node-1","LWR_ENV-genericServiceName-db-node-2"]
          responseOutputs = []
          client = client = boto3.client('docdb',region_name=activeRegion)
          successCounter = 0
         
          for x in range(len(nodeList)):
            response = client.describe_db_instances(
              DBInstanceIdentifier=f"{nodeList[x]}",
              )
            responseOutputs.append(f"{response}")
          
          for i in range(len(responseOutputs)):
            try:
              parseResponseOutput = re.search(r"'DBInstanceStatus': '(.*)', 'Endpoint':", str(responseOutputs[i]))
              if (parseResponseOutput.group(1) == 'available'):
                successCounter += 1
            except AtrributeError:
              if re.search(r"\b'DBInstanceStatus': 'available', 'Endpoint':\b", str(responseOutputs[i])):
                successCounter += 1
            except:
              docDBStatusActive = "DOCUMENTDB ACTIVE: ANOMALY DETECTED | UNABLE TO VALIDATE"
          
          if (successCounter == len(nodeList)):
            docDBStatusActive = "DOCUMENTDB ACTIVE: OK"
          else:
            docDBStatusActive = "DOCUMENTDB ACTIVE: ANOMALY DETECTED | ONE OR MORE OF THE NODES HAVE EITHER CHANGED, OR ARE NOT IN AN AVAILABLE STATE."
         
         # ------------------ documentdb (standby) ------------------
         
          responseOutputs = []
          client = client = boto3.client('docdb',region_name=standbyRegion)
          successCounter = 0
         
          for x in range(len(nodeList)):
            response = client.describe_db_instances(
              DBInstanceIdentifier=f"{nodeList[x]}",
              )
            responseOutputs.append(f"{response}")
          
          for i in range(len(responseOutputs)):
            try:
              parseResponseOutput = re.search(r"'DBInstanceStatus': '(.*)', 'Endpoint':", str(responseOutputs[i]))
              if (parseResponseOutput.group(1) == 'available'):
                successCounter += 1
            except AtrributeError:
              if re.search(r"\b'DBInstanceStatus': 'available', 'Endpoint':\b", str(responseOutputs[i])):
                successCounter += 1
            except:
              docDBStatusStandby = "DOCUMENTDB STANDBY: ANOMALY DETECTED | UNABLE TO VALIDATE"
          
          if (successCounter == len(nodeList)):
            docDBStatusStandby = "DOCUMENTDB STANDBY: OK"
          else:
            docDBStatusStandby = "DOCUMENTDB STANDBY: ANOMALY DETECTED | ONE OR MORE OF THE NODES HAVE EITHER CHANGED, OR ARE NOT IN AN AVAILABLE STATE."
         
         # ------------------ rundocDBQueriesLambda (active) ------------------
         
          activeLambdaPayload={"region":f"{activeRegion}","credentials":f"{activecredentials}","readOnly":"true"} 
          
          try:
            client = boto3.client(service_name='lambda',region_name=activeRegion)
            response = client.invoke(
              FunctionName=f"arn:aws:lambda:{activeRegion}:AWSaccountNumber:function:rundocDBQueries",
              InvocationType='RequestResponse',
              LogType='Tail',
              Payload=json.dumps(activeLambdaPayload)
              )
            lambdaStatusActive = "LAMBDA (rundocDBQueries) ACTIVE: OK"
          except:
            lambdaStatusActive = "LAMBDA (rundocDBQueries) ACTIVE: ANOMALY DETECTED | UNABLE TO REACH THE LAMBDA. CHECK TO SEE IF IT STILL EXISTS."
          
          lambdaOutput = response['Payload']
          LO = lambdaOutput.read()
          LO_remove_backslash = str(LO).replace("\\","")
          LO_parsed = str(LO_remove_backslash).split(",")
          
          microservicePublishingCheck = re.search(r"{\\'microserviceSyncDisabled\\': (.*)}}]\"', ' \"Status Reports\"", str(LO_parsed))

          UpdatesReportCheck = re.search(r"'sendToS3\\': (.*)}', \" 'site_status_report':", str(LO_parsed))
          statusReportCheck = re.search(r"{'sendToS3': (.*)}\", \" 'site_states_report':", str(LO_parsed))
          statesReportCheck = re.search(r"'site_states_report': {'sendToS3': (.*)}\", ' \\'site_status_events_report\\'", str(LO_parsed))
          statusEventsReportCheck = re.search(r"'site_status_events_report\\': {\\'sendToS3\\': (.*)}}}}]\"'", str(LO_parsed))

          shippingPartner1Check = re.search(r"{\\'shippingPartner1\\': {\\'apiInfo\\': {\\'fakeApi\\': (.*)}}', \"", str(LO_parsed))
          shippingPartner2Check = re.search(r"\" 'shippingPartner2': {'apiInfo': {'fakeApi': (.*)}}\", ' \\'shippingPartner3\\':", str(LO_parsed))
          shippingPartner3Check = re.search(r"'shippingPartner3\\': {\\'apiInfo\\': {\\'fakeApi\\': (.*)}}}}}]", str(LO_parsed))
          
          try:
            if ((microservicePublishingCheck.group(1) == 'False') and (UpdatesReportCheck.group(1) == 'True') and (statusReportCheck.group(1) == 'True') and (statesReportCheck.group(1) == 'True') and (statusEventsReportCheck.group(1) == 'True') and (shippingPartner1Check.group(1) == 'False') and (shippingPartner2Check.group(1) == 'False') and (shippingPartner3Check.group(1) == 'False')):
              dbValueStatusActive = "VALUES IN DOCUMENTDB ACTIVE: OK"
            elif ((microservicePublishingCheck.group(1) == 'True') and (UpdatesReportCheck.group(1) == 'False') and (statusReportCheck.group(1) == 'False') and (statesReportCheck.group(1) == 'False') and (statusEventsReportCheck.group(1) == 'False') and (shippingPartner1Check.group(1) == 'True') and (shippingPartner2Check.group(1) == 'True') and (shippingPartner3Check.group(1) == 'True')):
              dbValueStatusActive = "VALUES IN DOCUMENTDB ACTIVE: ANOMALY DETECTED | THE DB VALUES ARE NOT WHAT THEY ARE SUPPOSED TO BE."
          except:
            dbValueStatusActive = "LAMBDA ACTIVE: UNABLE TO VALIDATE"
            
         # ------------------ rundocDBQueriesLambda (standby) ------------------
         
          standbyLambdaPayload={"region":f"{standbyRegion}","credentials":f"{standbycredentials}","readOnly":"true"} 
          
          try:
            client = boto3.client(service_name='lambda',region_name=standbyRegion)
            response = client.invoke(
              FunctionName=f"arn:aws:lambda:{standbyRegion}:AWSaccountNumber:function:rundocDBQueries",
              InvocationType='RequestResponse',
              LogType='Tail',
              Payload=json.dumps(standbyLambdaPayload)
              )
            lambdaStatusStandby = "LAMBDA (rundocDBQueries) STANDBY: OK"
          except:
            lambdaStatusStandby = "LAMBDA (rundocDBQueries) STANDBY: ANOMALY DETECTED | UNABLE TO REACH THE LAMBDA. CHECK TO SEE IF IT STILL EXISTS."
          
          lambdaOutput = response['Payload']
          LO = lambdaOutput.read()
          LO_remove_backslash = str(LO).replace("\\","")
          LO_parsed = str(LO_remove_backslash).split(",")
          
          microservicePublishingCheck = re.search(r"{\\'microserviceSyncDisabled\\': (.*)}}]\"', ' \"Status Reports\"", str(LO_parsed))

          UpdatesReportCheck = re.search(r"'sendToS3\\': (.*)}', \" 'site_status_report':", str(LO_parsed))
          statusReportCheck = re.search(r"{'sendToS3': (.*)}\", \" 'site_states_report':", str(LO_parsed))
          statesReportCheck = re.search(r"'site_states_report': {'sendToS3': (.*)}\", ' \\'site_status_events_report\\'", str(LO_parsed))
          statusEventsReportCheck = re.search(r"'site_status_events_report\\': {\\'sendToS3\\': (.*)}}}}]\"'", str(LO_parsed))

          shippingPartner1Check = re.search(r"{\\'shippingPartner1\\': {\\'apiInfo\\': {\\'fakeApi\\': (.*)}}', \"", str(LO_parsed))
          shippingPartner2Check = re.search(r"\" 'shippingPartner2': {'apiInfo': {'fakeApi': (.*)}}\", ' \\'shippingPartner3\\':", str(LO_parsed))
          shippingPartner3Check = re.search(r"'shippingPartner3\\': {\\'apiInfo\\': {\\'fakeApi\\': (.*)}}}}}]", str(LO_parsed))
          
          try:
            if ((microservicePublishingCheck.group(1) == 'False') and (UpdatesReportCheck.group(1) == 'True') and (statusReportCheck.group(1) == 'True') and (statesReportCheck.group(1) == 'True') and (statusEventsReportCheck.group(1) == 'True') and (shippingPartner1Check.group(1) == 'False') and (shippingPartner2Check.group(1) == 'False') and (shippingPartner3Check.group(1) == 'False')):
              dbValueStatusStandby = "VALUES IN DOCUMENTDB STANDBY: ANOMALY DETECTED | THE DB VALUES ARE NOT WHAT THEY ARE SUPPOSED TO BE."
            elif ((microservicePublishingCheck.group(1) == 'True') and (UpdatesReportCheck.group(1) == 'False') and (statusReportCheck.group(1) == 'False') and (statesReportCheck.group(1) == 'False') and (statusEventsReportCheck.group(1) == 'False') and (shippingPartner1Check.group(1) == 'True') and (shippingPartner2Check.group(1) == 'True') and (shippingPartner3Check.group(1) == 'True')):
              dbValueStatusStandby = "VALUES IN DOCUMENTDB STANDBY: OK"
          except:
            dbValueStatusStandby = "LAMBDA STANDBY: UNABLE TO VALIDATE"

         # ------------------ LB and LB listener (active) ------------------
          
          try:
            client = boto3.client('elbv2', region_name = activeRegion)
            response = client.describe_listeners(
              ListenerArns=[
                  f"{activeLBListenerARN}",
              ]
            )
            activeLBListenerStatus = "LB LISTENER (microservice-LWR_ENV) ARN ACTIVE: OK"
          except:
            activeLBListenerStatus = "LB LISTENER (microservice-LWR_ENV) ARN ACTIVE: ANOMALY DETECTED | UNABLE TO REACH LISTENER. CHECK TO SEE IF IT STILL EXISTS."
            
          activeLBListenerPort = re.search("'Port': (.*), 'Protocol'", str(response))
          
          try:
            if (activeLBListenerPort.group(1) == '443'):
              activeLBListenerPortStatus = "LB LISTENER (microservice-LWR_ENV) PORT ACTIVE: OK"
            elif (activeLBListenerPort.group(1) == '4443'):
              activeLBListenerPortStatus = "LB LISTENER (microservice-LWR_ENV) PORT ACTIVE: ANOMALY DETECTED | THE PORT ON THE LOADBALANCER LISTENER IS 4443. IT SHOULD BE 443."
            else:
              activeLBListenerPortStatus = "LB LISTENER (microservice-LWR_ENV) PORT ACTIVE: UNABLE TO VALIDATE | THE PORT ON THE LOADBALANCER LISTENER IS AN UNEXPECTED VALUE. IT SHOULD BE 443."
          except:
            activeLBListenerPortStatus = "LB LISTENER (microservice-LWR_ENV) PORT ACTIVE: UNABLE TO VALIDATE"
            
         # ------------------ LB and LB listener (standby) ------------------
          
          try:
            client = boto3.client('elbv2', region_name = standbyRegion)
            response = client.describe_listeners(
              ListenerArns=[
                  f"{standbyLBListenerARN}",
              ]
            )
            standbyLBListenerStatus = "LB LISTENER (microservice-LWR_ENV) ARN STANDBY: OK"
          except:
            standbyLBListenerStatus = "LB LISTENER (microservice-LWR_ENV) ARN STANDBY: ANOMALY DETECTED | UNABLE TO REACH LISTENER. CHECK TO SEE IF IT STILL EXISTS."
            
          standbyLBListenerPort = re.search("'Port': (.*), 'Protocol'", str(response))
          
          try:
            if (standbyLBListenerPort.group(1) == '443'):
              standbyLBListenerPortStatus = "LB LISTENER (microservice-LWR_ENV) PORT STANDBY: OK"
            elif (standbyLBListenerPort.group(1) == '4443'):
              standbyLBListenerPortStatus = "LB LISTENER (microservice-LWR_ENV) PORT STANDBY: ANOMALY DETECTED | THE PORT ON THE LOADBALANCER LISTENER IS 4443. IT SHOULD BE 443."
            else:
              standbyLBListenerPortStatus = "LB LISTENER (microservice-LWR_ENV) PORT STANDBY: UNABLE TO VALIDATE | THE PORT ON THE LOADBALANCER LISTENER IS AN UNEXPECTED VALUE. IT SHOULD BE 443."
          except:
            standbyLBListenerPortStatus = "LB LISTENER (microservice-LWR_ENV) PORT STANDBY: UNABLE TO VALIDATE"
            
          # ------------------ Associations (restartmicroserviceServices Active)------------------

          try:
            client = boto3.client('ssm', region_name = activeRegion)
            response = client.describe_association(
              AssociationId=f"{restartmicroserviceServicesActive}"
            )
            restartmicroserviceServicesAssActiveStatus = "ASSOCIATION (restartmicroserviceServices) ACTIVE: OK"
          except:
            restartmicroserviceServicesAssActiveStatus = "ASSOCIATION (restartmicroserviceServices) ACTIVE: ANOMALY DETECTED | UNABLE TO VALIDATE ASSOCIATION. CHECK TO SEE IF IT STILL EXISTS."
            
          lastAssStatus = re.search("'DetailedStatus': '(.*)', 'AssociationStatusAggregatedCount':", str(response))
          if (lastAssStatus.group(1) == 'Success'):
            restartmicroserviceServicesAssActiveLastRun = "ASSOCIATION (restartmicroserviceServices) ACTIVE PREVIOUS RUN: OK"
          else:
            restartmicroserviceServicesAssActiveLastRun = "ASSOCIATION (restartmicroserviceServices) ACTIVE PREVIOUS RUN: ANOMALY DETECTED | THIS ASSOCIATION DID NOT REACH ALL TARGETS SUCCESSFULLY IN IT'S LAST RUN. PLEASE CHECK THE ASSOCIATION TARGET OUTPUTS TO SEE IF THIS IS EXPECTED."
            
            
            # ------------------ Associations (restartmicroserviceServices Standby)------------------

          try:
            client = boto3.client('ssm', region_name = standbyRegion)
            response = client.describe_association(
              AssociationId=f"{restartmicroserviceServicesStandby}"
            )
            restartmicroserviceServicesAssStandbyStatus = "ASSOCIATION (restartmicroserviceServices) STANDBY: OK"
          except:
            restartmicroserviceServicesAssStandbyStatus = "ASSOCIATION (restartmicroserviceServices) STANDBY: ANOMALY DETECTED | UNABLE TO VALIDATE ASSOCIATION. CHECK TO SEE IF IT STILL EXISTS."
            
          lastAssStatus = re.search("'DetailedStatus': '(.*)', 'AssociationStatusAggregatedCount':", str(response))
          if (lastAssStatus.group(1) == 'Success'):
            restartmicroserviceServicesAssStandbyLastRun = "ASSOCIATION (restartmicroserviceServices) STANDBY PREVIOUS RUN: OK"
          else:
            restartmicroserviceServicesAssStandbyLastRun = "ASSOCIATION (restartmicroserviceServices) STANDBY PREVIOUS RUN: ANOMALY DETECTED | THIS ASSOCIATION DID NOT REACH ALL TARGETS SUCCESSFULLY IN IT'S LAST RUN. PLEASE CHECK THE ASSOCIATION TARGET OUTPUTS TO SEE IF THIS IS EXPECTED."
          
          # ------------------ Associations (restartAllgenericServiceNameServices Active)------------------

          try:
            client = boto3.client('ssm', region_name = activeRegion)
            response = client.describe_association(
              AssociationId=f"{restartAllgenericServiceNameServicesActive}"
            )
            restartAllgenericServiceNameServicesAssActiveStatus = "ASSOCIATION (restartAllgenericServiceNameServices) ACTIVE: OK"
          except:
            restartAllgenericServiceNameServicesAssActiveStatus = "ASSOCIATION (restartAllgenericServiceNameServices) ACTIVE: ANOMALY DETECTED | UNABLE TO VALIDATE ASSOCIATION. CHECK TO SEE IF IT STILL EXISTS."
            
          lastAssStatus = re.search("'DetailedStatus': '(.*)', 'AssociationStatusAggregatedCount':", str(response))
          if (lastAssStatus.group(1) == 'Success'):
            restartAllgenericServiceNameServicesAssActiveLastRun = "ASSOCIATION (restartAllgenericServiceNameServices) ACTIVE PREVIOUS RUN: OK"
          else:
            restartAllgenericServiceNameServicesAssActiveLastRun = "ASSOCIATION (restartAllgenericServiceNameServices) ACTIVE PREVIOUS RUN: ANOMALY DETECTED | THIS ASSOCIATION DID NOT REACH ALL TARGETS SUCCESSFULLY IN IT'S LAST RUN. PLEASE CHECK THE ASSOCIATION TARGET OUTPUTS TO SEE IF THIS IS EXPECTED."
            
            
            # ------------------ Associations (restartAllgenericServiceNameServices Standby)------------------

          try:
            client = boto3.client('ssm', region_name = standbyRegion)
            response = client.describe_association(
              AssociationId=f"{restartAllgenericServiceNameServicesStandby}"
            )
            restartAllgenericServiceNameServicesAssStandbyStatus = "ASSOCIATION (restartAllgenericServiceNameServices) STANDBY: OK"
          except:
            restartAllgenericServiceNameServicesAssStandbyStatus = "ASSOCIATION (restartAllgenericServiceNameServices) STANDBY: ANOMALY DETECTED | UNABLE TO VALIDATE ASSOCIATION. CHECK TO SEE IF IT STILL EXISTS."
            
          lastAssStatus = re.search("'DetailedStatus': '(.*)', 'AssociationStatusAggregatedCount':", str(response))
          if (lastAssStatus.group(1) == 'Success'):
            restartAllgenericServiceNameServicesAssStandbyLastRun = "ASSOCIATION (restartAllgenericServiceNameServices) STANDBY PREVIOUS RUN: OK"
          else:
            restartAllgenericServiceNameServicesAssStandbyLastRun = "ASSOCIATION (restartAllgenericServiceNameServices) STANDBY PREVIOUS RUN: ANOMALY DETECTED | THIS ASSOCIATION DID NOT REACH ALL TARGETS SUCCESSFULLY IN IT'S LAST RUN. PLEASE CHECK THE ASSOCIATION TARGET OUTPUTS TO SEE IF THIS IS EXPECTED."
          
          # ------------------ Associations (stopgenericServiceNameServicesNewStandby Active)------------------

          try:
            client = boto3.client('ssm', region_name = activeRegion)
            response = client.describe_association(
              AssociationId=f"{stopgenericServiceNameServicesNewStandbyActive}"
            )
            stopgenericServiceNameServicesNewStandbyAssActiveStatus = "ASSOCIATION (stopgenericServiceNameServicesNewStandby) ACTIVE: OK"
          except:
            stopgenericServiceNameServicesNewStandbyAssActiveStatus = "ASSOCIATION (stopgenericServiceNameServicesNewStandby) ACTIVE: ANOMALY DETECTED | UNABLE TO VALIDATE ASSOCIATION. CHECK TO SEE IF IT STILL EXISTS."
            
          lastAssStatus = re.search("'DetailedStatus': '(.*)', 'AssociationStatusAggregatedCount':", str(response))
          if (lastAssStatus.group(1) == 'Success'):
            stopgenericServiceNameServicesNewStandbyAssActiveLastRun = "ASSOCIATION (stopgenericServiceNameServicesNewStandby) ACTIVE PREVIOUS RUN: OK"
          else:
            stopgenericServiceNameServicesNewStandbyAssActiveLastRun = "ASSOCIATION (stopgenericServiceNameServicesNewStandby) ACTIVE PREVIOUS RUN: ANOMALY DETECTED | THIS ASSOCIATION DID NOT REACH ALL TARGETS SUCCESSFULLY IN IT'S LAST RUN. PLEASE CHECK THE ASSOCIATION TARGET OUTPUTS TO SEE IF THIS IS EXPECTED."
            
            # ------------------ Associations (stopgenericServiceNameServicesNewStandby Standby)------------------

          try:
            client = boto3.client('ssm', region_name = standbyRegion)
            response = client.describe_association(
              AssociationId=f"{stopgenericServiceNameServicesNewStandbyStandby}"
            )
            stopgenericServiceNameServicesNewStandbyAssStandbyStatus = "ASSOCIATION (stopgenericServiceNameServicesNewStandby) STANDBY: OK"
          except:
            stopgenericServiceNameServicesNewStandbyAssStandbyStatus = "ASSOCIATION (stopgenericServiceNameServicesNewStandby) STANDBY: ANOMALY DETECTED | UNABLE TO VALIDATE ASSOCIATION. CHECK TO SEE IF IT STILL EXISTS."
            
          lastAssStatus = re.search("'DetailedStatus': '(.*)', 'AssociationStatusAggregatedCount':", str(response))
          if (lastAssStatus.group(1) == 'Success'):
           stopgenericServiceNameServicesNewStandbyAssStandbyLastRun = "ASSOCIATION (stopgenericServiceNameServicesNewStandby) STANDBY PREVIOUS RUN: OK"
          else:
            stopgenericServiceNameServicesNewStandbyAssStandbyLastRun = "ASSOCIATION (stopgenericServiceNameServicesNewStandby) STANDBY PREVIOUS RUN: ANOMALY DETECTED | THIS ASSOCIATION DID NOT REACH ALL TARGETS SUCCESSFULLY IN IT'S LAST RUN. PLEASE CHECK THE ASSOCIATION TARGET OUTPUTS TO SEE IF THIS IS EXPECTED."

            # ------------------ resource groups (microservice - Active) ------------------
          
          try:
            client = boto3.client('resource-groups', region_name = activeRegion)
            response = client.list_group_resources(
              Group = f"{microserviceInstancesRGActive}"
              )
            if all([x in str(response) for x in microserviceInstancesActive]):
              microserviceRGActiveStatus = "RESOURCE GROUP (microservice Instances) ACTIVE: OK"
            else:
              microserviceRGActiveStatus = "RESOURCE GROUP (microservice Instances) ACTIVE: ANOMALY DETECTED | THE INSTANCES IN THIS RESOURCE GROUP HAVE CHANGED."
          except:
            microserviceRGActiveStatus = "RESOURCE GROUP (microservice Instances) ACTIVE: ANOMALY DETECTED | UNABLE TO VALIDATE RESOURCE GROUP OR TARGETS."
            
            # ------------------ resource groups (microservice - Standby) ------------------
          
          try:
            client = boto3.client('resource-groups', region_name = standbyRegion)
            response = client.list_group_resources(
              Group = f"{microserviceInstancesRGStandby}"
              )
            if all([x in str(response) for x in microserviceInstancesStandby]):
              microserviceRGStandbyStatus = "RESOURCE GROUP (microservice Instances) STANDBY: OK"
            else:
              microserviceRGStandbyStatus = "RESOURCE GROUP (microservice Instances) STANDBY: ANOMALY DETECTED | THE INSTANCES IN THIS RESOURCE GROUP HAVE CHANGED."
          except:
            microserviceRGStandbyStatus = "RESOURCE GROUP (microservice Instances) STANDBY: ANOMALY DETECTED | UNABLE TO VALIDATE RESOURCE GROUP OR TARGETS."

            # ------------------ resource groups (All - Active) ------------------
          
          try:
            client = boto3.client('resource-groups', region_name = activeRegion)
            response = client.list_group_resources(
              Group = f"{allInstancesRGActive}"
              )
            if all([x in str(response) for x in allInstancesActive]):
              allInstancesRGActiveStatus = "RESOURCE GROUP (All Application Instances) ACTIVE: OK"
            else:
              allInstancesRGActiveStatus = f"RESOURCE GROUP (All Application Instances) ACTIVE: ANOMALY DETECTED | THE INSTANCES IN THIS RESOURCE GROUP HAVE CHANGED."
          except:
            allInstancesRGActiveStatus = "RESOURCE GROUP (All Application Instances) ACTIVE: ANOMALY DETECTED | UNABLE TO VALIDATE RESOURCE GROUP OR TARGETS."
            
            # ------------------ resource groups (All - Standby) ------------------
          
          try:
            client = boto3.client('resource-groups', region_name = standbyRegion)
            response = client.list_group_resources(
              Group = f"{allInstancesRGStandby}"
              )
            if all([x in str(response) for x in allInstancesStandby]):
              allInstancesRGStandbyStatus = "RESOURCE GROUP (All Application Instances) STANDBY: OK"
            else:
              allInstancesRGStandbyStatus = "RESOURCE GROUP (All Application Instances) STANDBY: ANOMALY DETECTED | THE INSTANCES IN THIS RESOURCE GROUP HAVE CHANGED."
          except:
            allInstancesRGStandbyStatus = "RESOURCE GROUP (All Application Instances) STANDBY: ANOMALY DETECTED | UNABLE TO VALIDATE RESOURCE GROUP OR TARGETS."
          
            # ------------------ backup / restore ------------------   

          boto_sts=boto3.client('sts')
          backuprestoreInstance = 'INSTANCE-ID'
          checkForgenericServiceNameBackuprestoreAssID = '[ASSOCIATION_ID_HERE]'
          
          #assuming role in central-it
          stsresponse = boto_sts.assume_role(
            RoleArn="arn:aws:iam::AWSaccountNumber:role/genericServiceName_DISASTER_RECOVERY_ROLE",
            RoleSessionName='triggercheckForgenericServiceNameBackuprestoreAssociation'
          )
          
          newsession_id = stsresponse["Credentials"]["AccessKeyId"]
          newsession_key = stsresponse["Credentials"]["SecretAccessKey"]
          newsession_token = stsresponse["Credentials"]["SessionToken"]

          client = boto3.client(service_name='ssm',region_name='us-east-1',aws_access_key_id=newsession_id,aws_secret_access_key=newsession_key,aws_session_token=newsession_token)
          response = client.start_associations_once(
            AssociationIds=[
              f"{checkForgenericServiceNameBackuprestoreAssID}"
              ]
            )
            
          time.sleep(15)
          
          #getting and parsing command ID
          getCommandId = client.list_command_invocations(
            InstanceId=f"{backuprestoreInstance}",
            Filters=[
                {
                  'key': 'InvokedAfter',
                  'value': f"{current_datetime}"
                }
              ],
            )
            
          parseCommandId = re.search(r"'CommandId': '(.*)', 'InstanceId':", str(getCommandId))
          try:
            command_ID = parseCommandId.group(1)
          
            #getting and parsing association output from instance
            associationOutput = client.get_command_invocation(
              CommandId=f"{command_ID}",
              InstanceId=f"{backuprestoreInstance}",
            )
            parseAssociationOutput = re.search(r", 'StandardOutputContent': '(.*)', 'StandardOutputUrl':", str(associationOutput))
            if re.search(r"\brestore\b", str(parseAssociationOutput.group(1))):
              backuprestoreStatus = "BACKUP/restore: ANOMALY DETECTED | restore IN PROGRESS"
            elif re.search(r"\bbackup\b", str(parseAssociationOutput.group(1))):
              backuprestoreStatus = "BACKUP/restore: ANOMALY DETECTED | BACKUP IN PROGRESS"
            else:
              backuprestoreStatus = "BACKUP/restore: OK"
          except:
            backuprestoreStatus = "BACKUP/restore: ANOMALY DETECTED | UNABLE TO VALIDATE OUTPUT FROM THE ASSOCIATION."
          
            # ------------------ print results ------------------  

          print(backuprestoreStatus)  
          print(secretsManagerStatus)
          print(docDBStatusActive)
          print(docDBStatusStandby)
          print(lambdaStatusActive)
          print(lambdaStatusStandby)
          print(dbValueStatusActive)
          print(dbValueStatusStandby)
          print(activeLBListenerStatus)
          print(activeLBListenerPortStatus)
          print(standbyLBListenerStatus)
          print(standbyLBListenerPortStatus)
          print(restartmicroserviceServicesAssActiveStatus)
          print(restartmicroserviceServicesAssActiveLastRun)
          print(restartmicroserviceServicesAssStandbyStatus)
          print(restartmicroserviceServicesAssStandbyLastRun)
          print(restartAllgenericServiceNameServicesAssActiveStatus)
          print(restartAllgenericServiceNameServicesAssActiveLastRun)
          print(restartAllgenericServiceNameServicesAssStandbyStatus)
          print(restartAllgenericServiceNameServicesAssStandbyLastRun)
          print(stopgenericServiceNameServicesNewStandbyAssActiveStatus)
          print(stopgenericServiceNameServicesNewStandbyAssActiveLastRun)
          print(stopgenericServiceNameServicesNewStandbyAssStandbyStatus)
          print(stopgenericServiceNameServicesNewStandbyAssStandbyLastRun)
          print(microserviceRGActiveStatus)
          print(microserviceRGStandbyStatus)
          print(allInstancesRGActiveStatus)
          print(allInstancesRGStandbyStatus)
          print("\n")

            # ------------------ post to slack ------------------  
          
          Intro = print_time + "\n" + print_regions + "\n" + backuprestoreStatus + "\n" + secretsManagerStatus + "\n" 
          docDB = docDBStatusActive + "\n"  + docDBStatusStandby + "\n"  + dbValueStatusActive + "\n"  + dbValueStatusStandby + "\n" 
          lambdas = lambdaStatusActive + "\n"  + lambdaStatusStandby + "\n" 
          loadBalancers = activeLBListenerStatus + "\n"  + activeLBListenerPortStatus + "\n"  + standbyLBListenerStatus + "\n"  + standbyLBListenerPortStatus + "\n" 
          RMCassociations = restartmicroserviceServicesAssActiveStatus + "\n"  + restartmicroserviceServicesAssActiveLastRun + "\n"  + restartmicroserviceServicesAssStandbyStatus + "\n"  + restartmicroserviceServicesAssStandbyLastRun + "\n" 
          RAOassociations = restartAllgenericServiceNameServicesAssActiveStatus + "\n"  + restartAllgenericServiceNameServicesAssActiveLastRun + "\n"  + restartAllgenericServiceNameServicesAssStandbyStatus + "\n"  + restartAllgenericServiceNameServicesAssStandbyLastRun + "\n" 
          SOSNSassociations = stopgenericServiceNameServicesNewStandbyAssActiveStatus + "\n"  + stopgenericServiceNameServicesNewStandbyAssActiveLastRun + "\n"  + stopgenericServiceNameServicesNewStandbyAssStandbyStatus + "\n"  + stopgenericServiceNameServicesNewStandbyAssStandbyLastRun + "\n" 
          resourceGroups = microserviceRGActiveStatus + "\n"  + microserviceRGStandbyStatus + "\n"  + allInstancesRGActiveStatus + "\n"  + allInstancesRGStandbyStatus + "\n" 
          
          
          
          slack = event['SlackChannel']
          snsclient = boto3.client('sns')
          snsArn = 'arn:aws:sns:us-east-1:AWSaccountNumber:genericServiceName_DISASTER_RECOVERY_NOTIF'
          message = Intro + docDB + lambdas + loadBalancers + RMCassociations + RAOassociations + SOSNSassociations + resourceGroups

          try:
            response = snsclient.publish(
              TopicArn = snsArn,
              Message = message,
              MessageAttributes={
                'Channel': {
                  'DataType': 'String',
                  'StringValue': f"{slack}"
                }
              },
              Subject = "genericServiceName INFRASTRUCTURE CHECK RESULTS."
            )
          except:
            print("UNABLE TO POST TO SLACK.")
      InputPayload:
        SlackChannel: '{{SlackChannel}}'
    description: Checks genericServiceName infrastructure. Posts results to the specified slack channel in parameters.
